- Agentless strictly works on SWE-Bench and SWE-Lite. Cannot make it work on your own GitHub repo

- Steps 1 and 2 work and their output can be found on out.txt. For some reason, Agentless clones the same
    repo MULTIPLE TIMES and checks out to the same commit, probably due to `swe_bench_data = load_dataset(args.dataset, split="test")`

- Module errors. Can be fixed by editting files and exposing classes and functions like this:
    ```
    pico /root/Agentless/agentless/lib/python3.10/site-packages/swebench/harness/test_spec/__init__.py
    from .test_spec import TestSpec, make_env_script_list
    ```
    Too much work, however. 1 fix produces 5 more errors.

- Found some artifacts here, but they only contain json data: https://github.com/OpenAutoCoder/Agentless/releases
    `swebench_repo_structure` contains all repos from swe bench to avoid multiple cloning


----- SWE-Bench -----
- SoftWare Engineering Benchmark
- Dataset and evaluation framework designed to assess the ability of LLMs to fix real-world GitHub issues
- Built on real PRs and issues from Stack-based and PyTorch GitHub repositories.

- Model contains:
    - GitHub issue in natural language
    - Codebase snapshot before the fix
    - Files edited in PR that resolved the issue
- Goal: Given the issue and context, can an LLM generate patches that resolve the issue and pass the tests?

        SWE-bench                   vs      SWE-bench Lite
------------------------------------------------------------
~2,294 examples                     vs      ~300 examples
Full codebases (PyTorch, etc.)      vs	    Smaller subsets
High Performance load(full repo context)    vs More lightweight Performance load

- Experimenting is usually done in SWE-bench Lite

- git clone https://github.com/princeton-nlp/SWE-bench.git && cd SWE-bench && pip install -e . && pip install datasets

IMPORTANT FIELDS
- instance_id: (str) - ID, usually as repo_owner__repo_name-PR-number.
- patch: (str) - The gold patch, the patch generated by the PR that resolved the issue.
- repo: (str) - The repository owner/name identifier from GitHub.
- base_commit: (str) - The commit hash of the repository representing the HEAD of the repository before the solution PR is applied.
- test_patch: (str) - A test-file patch that was contributed by the solution PR.
- FAIL_TO_PASS: (str) - A json list of strings that represent the set of tests resolved by the PR and tied to the issue resolution.
- PASS_TO_PASS: (str) - A json list of strings that represent tests that should pass before and after the PR application.

MEH FIELDS
- hints_text: (str) - Comments made on the issue prior to the creation of the solution PRâ€™s first commit creation date.
- created_at: (str) - The creation date of the pull request.
- problem_statement: (str) - The issue title and body.
- version: (str) - Installation version to use for running evaluation.
- environment_setup_commit: (str) - commit hash to use for environment setup and installation.
